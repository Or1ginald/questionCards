{"version":3,"sources":["components/createNewPassword/CreateNewPassword.module.scss","components/registration/Registration.module.scss","components/login/Login.module.scss","components/passwordRecovery/PasswordRecovery.module.scss","components/header/Header.module.scss","components/common/customTextInput/CustomTextInput.module.scss","components/routesComponent/RoutesComponent.module.scss","components/common/customButton/CustomButton.module.scss","components/common/snackbar/SnackBar.module.scss","enum/pathes.ts","enum/requestStatus.ts","enum/autoCapitalize.ts","api/apiConfig.ts","api/authApi.ts","utils/passwordRequestForm.ts","store/reducers/userAuthFormReducer.ts","store/reducers/userReducer.ts","store/reducers/appReducer.ts","store/selectors/userAuthForms/userAuthFormSelectors.ts","store/selectors/app/appSelectors.ts","store/selectors/user/userReducerSelectors.ts","components/registration/Registration.tsx","components/header/Header.tsx","components/profile/Profile.tsx","components/routesComponent/RoutesComponent.tsx","components/login/Login.tsx","components/passwordRecovery/PasswordRecovery.tsx","components/createNewPassword/CreateNewPassword.tsx","components/common/customButton/CustomButton.tsx","components/common/customTextInput/CustomTextInput.tsx","components/common/snackbar/Snackbar.tsx","components/common/spinner/Spinner.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","PATH","requestStatus","AutoCapitalize","instance","axios","create","baseURL","process","withCredentials","authApi","email","password","post","rememberMe","delete","resetPasswordToken","userEmail","frontAddress","from","message","passwordRequestForm","setEmail","setPassword","setConfirmPassword","setIsRegistered","setRememberMe","userAuthFormReducerInitState","confirmPassword","error","isRegistered","setEmailAC","type","setPasswordAC","setConfirmPasswordAC","setUserProfileData","setStateToDefault","userReducerInitialState","_id","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","setUserProfileDataAC","payload","logoutTC","dispatch","setIsLoadingAC","then","res","console","log","setIsAuthAC","catch","e","setErrorAC","response","data","finally","registerTC","getState","userAuthForm","setIsLoading","setError","setIsAuth","setIsInitialized","appReducerInitState","isInitialized","isLoading","isAuth","setIsInitializedAC","getEmail","state","getPassword","getConfirmPassword","getIsRegistered","getError","app","getIsAuth","getIsLoading","getIsInitialized","getUserEmail","user","getUserName","getUserAvatar","Registration","memo","useDispatch","useSelector","useEffect","handleEmailChange","useCallback","value","handlePasswordChange","handleConfirmPasswordChange","to","LOGIN","className","style","registrationForm","container","onSubmit","preventDefault","form","CustomTextInput","placeholder","onChange","autoCapitalize","false","CustomButton","title","Header","header","logout","onClick","Profile","userName","src","alt","RoutesComponent","s","element","PROFILE","path","REGISTRATION","Login","PasswordRecovery","PASSWORD_RECOVERY","CREATE_NEW_PASSWORD","CreateNewPassword","navigate","useNavigate","loginForm","additions","doRemember","currentTarget","checked","signUpContainer","signUpLink","useState","setIsFormSent","passwordRecoveryForm","token","useParams","isFormSent","createNewPasswordForm","React","props","disabled","button","inputWrap","size","input","autoComplete","spellCheck","true","Snackbar","snackbar","Spinner","display","justifyContent","alignItems","App","rootReducer","combineReducers","action","newState","Object","fromEntries","entries","map","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01fb8f2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"createNewPasswordForm\":\"CreateNewPassword_createNewPasswordForm__2HiBA\",\"container\":\"CreateNewPassword_container__2BbsK\",\"form\":\"CreateNewPassword_form__31usz\",\"additions\":\"CreateNewPassword_additions__3aE-X\",\"signUpContainer\":\"CreateNewPassword_signUpContainer__3fLTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationForm\":\"Registration_registrationForm__2Incd\",\"container\":\"Registration_container__g8KJ7\",\"form\":\"Registration_form__27a-o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__1OV9O\",\"container\":\"Login_container__1scR1\",\"form\":\"Login_form__3bgry\",\"additions\":\"Login_additions__2wjVI\",\"signUpContainer\":\"Login_signUpContainer__1LWut\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passwordRecoveryForm\":\"PasswordRecovery_passwordRecoveryForm__3ph1j\",\"container\":\"PasswordRecovery_container__3u-0D\",\"form\":\"PasswordRecovery_form__3tnSo\",\"additions\":\"PasswordRecovery_additions__1nQkM\",\"signUpContainer\":\"PasswordRecovery_signUpContainer__G8iKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1fCsm\",\"container\":\"Header_container__29Cyd\",\"logout\":\"Header_logout__1elhx\",\"current\":\"Header_current__m4nQT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"CustomTextInput_inputWrap__3xobm\",\"input\":\"CustomTextInput_input__1zPq1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RoutesComponent_container__2qzC6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__3wmoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snackbar\":\"SnackBar_snackbar__769c6\"};","export enum PATH {\n  REGISTRATION = '/registration',\n  LOGIN = '/login',\n  PROFILE = '/profile',\n  // CONFIRM_PASSWORD = '/confirmPassword/*',\n  POPUP = '/popup',\n  CREATE_NEW_PASSWORD = '/createNewPassword/:token',\n  PASSWORD_RECOVERY = '/passwordRecovery/*', // Token?\n  PAGE_404 = '/*',\n  CARDS = '/cards',\n  CARD = '/card',\n}\n","export enum requestStatus {\n  idle = 'idle',\n  loading = 'loading',\n  succeeded = 'succeeded',\n  failed = 'failed',\n}\n","export enum AutoCapitalize {\n  true = 'on',\n  false = 'off',\n}\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\nimport { passwordRequestForm } from '../utils';\n\nimport { instance } from './apiConfig';\n\nexport type LoginResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number; // количество колод\n\n  created: Date;\n  updated: Date;\n  isAdmin: boolean;\n  verified: boolean; // подтвердил ли почту\n  rememberMe: boolean;\n\n  error?: string;\n};\n\nexport type ResponseTypeModel = {\n  info: string;\n  error: string;\n};\n\nexport const authApi = {\n  register(email: string, password: string): Promise<AxiosResponse> {\n    return instance.post('/auth/register', { email, password });\n  },\n  login(\n    email: Nullable<string>,\n    password: Nullable<string>,\n    rememberMe: Nullable<boolean>,\n  ) {\n    return instance.post<any, AxiosResponse<LoginResponseType>>('/auth/login', {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  authMe() {\n    return instance.post<any, AxiosResponse<LoginResponseType>>('/auth/me');\n  },\n  logout() {\n    return instance.delete<any, AxiosResponse<ResponseTypeModel>>('/auth/me');\n  },\n  createNewPassword(password: string, resetPasswordToken: string) {\n    return instance.post<any, AxiosResponse<ResponseTypeModel>>(\n      '/auth/set-new-password',\n      { password, resetPasswordToken },\n    );\n  },\n  forgotPassword(userEmail: string) {\n    return instance.post<any, AxiosResponse<ResponseTypeModel>>(\n      '/auth/forgot',\n      passwordRequestForm(userEmail, 'GuessCards.com'),\n    );\n  },\n};\n","type passwordRequestFormType = {\n  email: string;\n  from: string;\n  message: string;\n};\n\nexport const passwordRequestForm = (\n  userEmail: string,\n  frontAddress: string,\n): passwordRequestFormType => ({\n  email: userEmail,\n  from: frontAddress,\n  message: `\n    <div\n      style=\"\n        background-color: #a8d5c9;\n        margin: 30px auto;\n        border: 1px solid black;\n        border-radius: 10px;\n        padding: 15px;\n        text-align: center;\n      \"\n    >\n      Password Recovery Link:\n      <a\n        href=\"https://or1ginald.github.io/gameCards/#/createNewPassword/$token$\"\n        >Click Here</a\n      >`,\n});\n","import { Nullable } from 'types';\n\nconst setEmail = 'REGISTRATION/SET_EMAIL';\nconst setPassword = 'REGISTRATION/SET_PASSWORD';\nconst setConfirmPassword = 'REGISTRATION/SET_CONFIRM_PASSWORD';\nconst setIsRegistered = 'REGISTRATION/SET_IS_REGISTERED';\nconst setRememberMe = 'REGISTRATION/SET_REMEMBER_ME';\n\nexport type userAuthFormReducerActionsType =\n  | setEmailACType\n  | setPasswordACType\n  | setConfirmPasswordACType\n  | setIsRegisteredACType\n  | setRememberMeACType;\n\nexport type setEmailACType = ReturnType<typeof setEmailAC>;\nexport type setPasswordACType = ReturnType<typeof setPasswordAC>;\nexport type setConfirmPasswordACType = ReturnType<typeof setConfirmPasswordAC>;\nexport type setIsRegisteredACType = ReturnType<typeof setIsRegisteredAC>;\nexport type setRememberMeACType = ReturnType<typeof setRememberMeAC>;\n\nexport type UserAuthFormInitStateType = {\n  email: Nullable<string>;\n  password: Nullable<string>;\n  confirmPassword: Nullable<string>;\n  rememberMe: Nullable<boolean>;\n  isRegistered: boolean;\n};\n\nexport const userAuthFormReducerInitState = {\n  email: null,\n  password: null,\n  confirmPassword: null,\n  rememberMe: null,\n  error: null,\n  isRegistered: false,\n};\n\nexport const userAuthFormReducer = (\n  state: UserAuthFormInitStateType = userAuthFormReducerInitState,\n  action: userAuthFormReducerActionsType,\n): UserAuthFormInitStateType => {\n  switch (action.type) {\n    case setEmail:\n      return { ...state, email: action.email };\n    case setPassword:\n      return { ...state, password: action.password };\n    case setConfirmPassword:\n      return { ...state, confirmPassword: action.confirmPassword };\n    case setRememberMe:\n      return { ...state, rememberMe: action.doRemember };\n    case setIsRegistered:\n      return { ...state, isRegistered: action.isRegistered };\n    default:\n      return state;\n  }\n};\n\nexport const setEmailAC = (email: Nullable<string>) =>\n  ({\n    type: setEmail,\n    email,\n  } as const);\nexport const setPasswordAC = (password: Nullable<string>) =>\n  ({\n    type: setPassword,\n    password,\n  } as const);\nexport const setConfirmPasswordAC = (confirmPassword: Nullable<string>) =>\n  ({\n    type: setConfirmPassword,\n    confirmPassword,\n  } as const);\nexport const setRememberMeAC = (doRemember: Nullable<boolean>) =>\n  ({\n    type: setRememberMe,\n    doRemember,\n  } as const);\nexport const setIsRegisteredAC = (isRegistered: boolean) =>\n  ({\n    type: setIsRegistered,\n    isRegistered,\n  } as const);\n","import { Dispatch } from 'redux';\n\nimport {\n  setErrorAC,\n  setIsAuthAC,\n  setIsInitializedAC,\n  setIsLoadingAC,\n} from './appReducer';\nimport {\n  setConfirmPasswordAC,\n  setIsRegisteredAC,\n  setPasswordAC,\n} from './userAuthFormReducer';\n\nimport { authApi } from 'api';\nimport { AppThunk, Nullable } from 'types';\n\nconst setUserProfileData = 'USER_REDUCER/SET_USER_PROFILE_DATA';\nconst setStateToDefault = 'USER_REDUCER/SET_STATE_TO_DEFAULT';\n\nexport type userReducerInitialStateType = {\n  _id: Nullable<string>;\n  email: Nullable<string>;\n  name: Nullable<string>;\n  avatar?: Nullable<string>;\n  publicCardPacksCount: Nullable<number>; // количество колод\n  created: Nullable<Date>;\n  updated: Nullable<Date>;\n  isAdmin: Nullable<boolean>;\n  verified: Nullable<boolean>; // подтвердил ли почту\n  rememberMe: Nullable<boolean>;\n  error?: Nullable<string>;\n};\n\nexport type userReducerActionsType = setUserProfileDataACType | setStateToDefaultACType;\n\nexport type setUserProfileDataACType = ReturnType<typeof setUserProfileDataAC>;\nexport type setStateToDefaultACType = ReturnType<typeof setStateToDefaultAC>;\n\nconst userReducerInitialState = {\n  _id: null,\n  email: null,\n  name: null,\n  avatar: null,\n  publicCardPacksCount: null, // количество колод\n  created: null,\n  updated: null,\n  isAdmin: null,\n  verified: null, // подтвердил ли почту\n  rememberMe: null,\n  error: null,\n};\n\nexport const userReducer = (\n  state: userReducerInitialStateType = userReducerInitialState,\n  action: userReducerActionsType,\n): userReducerInitialStateType => {\n  switch (action.type) {\n    case setUserProfileData: {\n      return { ...state, ...action.payload };\n    }\n    case setStateToDefault: {\n      const newState = { ...state };\n      // Object.keys(state).forEach(el => newState[el] === null);\n      Object.fromEntries(Object.entries(newState).map(([k]) => [k, null]));\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const setUserProfileDataAC = (payload: any) =>\n  ({\n    type: setUserProfileData,\n    payload,\n  } as const);\n\nexport const setStateToDefaultAC = () =>\n  ({\n    type: setStateToDefault,\n  } as const);\n\nexport const setUserProfileDataTC = (): AppThunk => (dispatch: Dispatch, getState) => {\n  const { email, password, rememberMe } = getState().userAuthForm;\n  dispatch(setIsLoadingAC(true));\n  authApi\n    .login(email, password, rememberMe)\n    .then(res => {\n      dispatch(setUserProfileDataAC(res.data));\n      dispatch(setIsAuthAC(true));\n      dispatch(setIsInitializedAC(true));\n    })\n    .catch(e => dispatch(setErrorAC(e.response.data.error)))\n    .finally(() => dispatch(setIsLoadingAC(false)));\n};\nexport const authMeTC = (): AppThunk => (dispatch: Dispatch) => {\n  dispatch(setIsLoadingAC(true));\n  authApi\n    .authMe()\n    .then(res => {\n      dispatch(setUserProfileDataAC(res.data));\n      dispatch(setIsAuthAC(true));\n    })\n    .catch(e => {\n      dispatch(setErrorAC(e.response.data.error));\n    })\n    .finally(() => dispatch(setIsLoadingAC(false)));\n};\nexport const logoutTC = (): AppThunk => (dispatch: Dispatch) => {\n  dispatch(setIsLoadingAC(true));\n  authApi\n    .logout()\n    .then(res => {\n      console.log(res);\n      dispatch(setStateToDefaultAC());\n      dispatch(setIsAuthAC(false));\n    })\n    .catch(e => {\n      dispatch(setErrorAC(e.response.data.error));\n    })\n    .finally(() => dispatch(setIsLoadingAC(false)));\n};\nexport const registerTC = (): AppThunk => (dispatch: Dispatch, getState) => {\n  const email = getState().userAuthForm.email as string;\n  const password = getState().userAuthForm.password as string;\n  dispatch(setIsLoadingAC(true));\n  authApi\n    .register(email, password)\n    .then(() => {\n      dispatch(setIsRegisteredAC(true));\n      console.log('Registration success');\n      // dispatch(setStateToDefaultAC());\n    })\n    .catch(e => {\n      dispatch(setErrorAC(e.response.data.error));\n    })\n    .finally(() => dispatch(setIsLoadingAC(false)));\n};\nexport const forgotPasswordTC = (): AppThunk => (dispatch: Dispatch, getState) => {\n  const email = getState().userAuthForm.email as string;\n  dispatch(setIsLoadingAC(true));\n  authApi\n    .forgotPassword(email)\n    .then(() => {\n      // dispatch(setIsRegisteredAC(true));\n      console.log('Mail was sent');\n      // dispatch(setStateToDefaultAC());\n    })\n    .catch(e => {\n      dispatch(setErrorAC(e.response.data.error));\n    })\n    .finally(() => dispatch(setIsLoadingAC(false)));\n};\nexport const createNewPasswordTC =\n  (resetPasswordToken: string): AppThunk =>\n  (dispatch: Dispatch, getState) => {\n    const password = getState().userAuthForm.password as string;\n    dispatch(setIsLoadingAC(true));\n    authApi\n      .createNewPassword(password, resetPasswordToken)\n      .then(() => {\n        // dispatch(setIsRegisteredAC(true));\n        console.log('New password was created');\n        // dispatch(setStateToDefaultAC());\n      })\n      .catch(e => {\n        dispatch(setErrorAC(e.response.data.error));\n      })\n      .finally(() => {\n        dispatch(setPasswordAC(null));\n        dispatch(setConfirmPasswordAC(null));\n        dispatch(setIsLoadingAC(false));\n      });\n  };\n","import { Dispatch } from 'redux';\n\nimport { authApi } from '../../api';\n\nimport { setUserProfileDataAC } from './userReducer';\n\nimport { AppThunk, Nullable } from 'types';\n\nexport type appReducerInitialStateType = {\n  isLoading: boolean;\n  isAuth: boolean;\n  error: Nullable<string>;\n  isInitialized: boolean;\n};\n\nexport const setIsLoading = 'APP/SET_IS_LOADING';\nexport const setError = 'APP/SET_ERROR';\nexport const setIsAuth = 'APP/SET_IS_AUTH';\nexport const setIsInitialized = 'APP/SET_IS_INITIALIZED';\n\nexport type appReducerActionsType =\n  | setIsLoadingACType\n  | setErrorACType\n  | setIsAuthACType\n  | setIsInitializedACType;\nexport type setIsLoadingACType = ReturnType<typeof setIsLoadingAC>;\nexport type setErrorACType = ReturnType<typeof setErrorAC>;\nexport type setIsAuthACType = ReturnType<typeof setIsAuthAC>;\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>;\n\nexport const appReducerInitState = {\n  isInitialized: false,\n  isLoading: false,\n  isAuth: false,\n  error: null,\n};\n\nexport const appReducer = (\n  state: appReducerInitialStateType = appReducerInitState,\n  action: appReducerActionsType,\n): appReducerInitialStateType => {\n  switch (action.type) {\n    case setIsLoading:\n      return { ...state, isLoading: action.isLoading };\n    case setError:\n      return { ...state, error: action.error };\n    case setIsAuth:\n      return { ...state, isAuth: action.isAuth };\n    case setIsInitialized:\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return state;\n  }\n};\n\nexport const setIsLoadingAC = (isLoading: boolean) =>\n  ({\n    type: setIsLoading,\n    isLoading,\n  } as const);\nexport const setErrorAC = (error: Nullable<string>) =>\n  ({\n    type: setError,\n    error,\n  } as const);\nexport const setIsAuthAC = (isAuth: boolean) =>\n  ({\n    type: setIsAuth,\n    isAuth,\n  } as const);\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({\n    type: setIsInitialized,\n    isInitialized,\n  } as const);\n\nexport const initializeTC = (): AppThunk => (dispatch: Dispatch) => {\n  dispatch(setIsLoadingAC(true));\n  return authApi\n    .authMe()\n    .then(res => {\n      dispatch(setIsAuthAC(true));\n      dispatch(setUserProfileDataAC(res.data));\n    })\n    .finally(() => {\n      dispatch(setIsInitializedAC(true));\n      dispatch(setIsLoadingAC(false));\n    });\n};\n","import { RootStateType } from 'store';\nimport { Nullable } from 'types';\n\nexport const getEmail = (state: RootStateType): Nullable<string> =>\n  state.userAuthForm.email;\nexport const getPassword = (state: RootStateType): Nullable<string> =>\n  state.userAuthForm.password;\nexport const getConfirmPassword = (state: RootStateType): Nullable<string> =>\n  state.userAuthForm.confirmPassword;\nexport const getIsRegistered = (state: RootStateType): boolean =>\n  state.userAuthForm.isRegistered;\n","import { RootStateType } from 'store';\nimport { Nullable } from 'types';\n\nexport const getError = (state: RootStateType): Nullable<string> => state.app.error;\nexport const getIsAuth = (state: RootStateType): boolean => state.app.isAuth;\nexport const getIsLoading = (state: RootStateType): boolean => state.app.isLoading;\nexport const getIsInitialized = (state: RootStateType): boolean =>\n  state.app.isInitialized;\n","import { RootStateType } from 'store';\nimport { Nullable } from 'types';\n\nexport const getUserId = (state: RootStateType): Nullable<string> => state.user._id;\nexport const getUserEmail = (state: RootStateType): Nullable<string> => state.user.email;\nexport const getUserName = (state: RootStateType): Nullable<string> => state.user.name;\nexport const getUserAvatar = (state: RootStateType): Nullable<string> | undefined =>\n  state.user.avatar;\nexport const getUserPublicCardPacksCount = (state: RootStateType): Nullable<number> =>\n  state.user.publicCardPacksCount;\nexport const getUserCreated = (state: RootStateType): Nullable<Date> =>\n  state.user.created;\nexport const getUserUpdated = (state: RootStateType): Nullable<Date> =>\n  state.user.updated;\nexport const getUserIsAdmin = (state: RootStateType): Nullable<boolean> =>\n  state.user.isAdmin;\nexport const getUserIsVerified = (state: RootStateType): Nullable<boolean> =>\n  state.user.verified;\nexport const getUserDoRememberMe = (state: RootStateType): Nullable<boolean> =>\n  state.user.rememberMe;\nexport const getUserError = (state: RootStateType): Nullable<string> | undefined =>\n  state.user.error;\n","import { FormEvent, memo, useCallback, useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport {\n  setConfirmPasswordAC,\n  setEmailAC,\n  setPasswordAC,\n} from '../../store/reducers/userAuthFormReducer';\nimport { registerTC } from '../../store/reducers/userReducer';\n\nimport style from './Registration.module.scss';\n\nimport { CustomButton, CustomTextInput } from 'components';\nimport { AutoCapitalize, PATH } from 'enum';\nimport { getConfirmPassword, getEmail, getIsRegistered, getPassword } from 'store';\nimport { ReturnComponentType } from 'types';\n\nexport const Registration = memo((): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const email = useSelector(getEmail);\n  const password = useSelector(getPassword);\n  const confirmPassword = useSelector(getConfirmPassword);\n  const isRegistered = useSelector(getIsRegistered);\n\n  useEffect(\n    () =>\n      function cleanup() {\n        console.log('cleanup');\n        dispatch(setEmailAC(null));\n        dispatch(setPasswordAC(null));\n        dispatch(setConfirmPasswordAC(null));\n      },\n    [],\n  );\n\n  const handleEmailChange = useCallback((value: string) => {\n    dispatch(setEmailAC(value));\n  }, []);\n  const handlePasswordChange = useCallback((value: string) => {\n    dispatch(setPasswordAC(value));\n  }, []);\n  const handleConfirmPasswordChange = useCallback((value: string) => {\n    dispatch(setConfirmPasswordAC(value));\n  }, []);\n\n  const onSubmitClick = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (password === confirmPassword) {\n      dispatch(registerTC());\n      dispatch(setEmailAC(null));\n      dispatch(setPasswordAC(null));\n      dispatch(setConfirmPasswordAC(null));\n    }\n    if (password !== confirmPassword) {\n      console.log('Пароли не совпадают');\n    }\n  };\n\n  if (isRegistered) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.registrationForm}>\n      <div className={style.container}>\n        <h1>Registration</h1>\n        <form onSubmit={onSubmitClick} className={style.form}>\n          <CustomTextInput\n            placeholder=\"Email\"\n            value={email ?? ''}\n            onChange={handleEmailChange}\n            type=\"text\"\n            autoCapitalize={AutoCapitalize.false}\n          />\n          <CustomTextInput\n            placeholder=\"Password\"\n            onChange={handlePasswordChange}\n            value={password ?? ''}\n            type=\"password\"\n          />\n          <CustomTextInput\n            placeholder=\"Confirm Password\"\n            onChange={handleConfirmPasswordChange}\n            value={confirmPassword ?? ''}\n            type=\"password\"\n          />\n          <div>\n            <CustomButton title=\"Create\" type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n});\n","import { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { logoutTC } from '../../store/reducers/userReducer';\n\nimport style from './Header.module.scss';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Header = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  return (\n    <div className={style.header}>\n      <div className={style.container}>\n        <Link to=\"/index\">Logo</Link>\n        <nav>\n          <Link to=\"profile\">Profile</Link>\n          <Link to=\"packs\">Packs</Link>\n        </nav>\n        {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n        <div className={style.logout} onClick={() => dispatch(logoutTC())}>\n          Log out\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { memo, useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport style from '../registration/Registration.module.scss';\n\nimport { Spinner } from 'components';\nimport { PATH } from 'enum';\nimport {\n  getIsAuth,\n  getIsInitialized,\n  // getIsLoading,\n  getUserAvatar,\n  getUserEmail,\n  getUserName,\n} from 'store';\nimport { setErrorAC } from 'store/reducers/appReducer';\n\nexport const Profile = memo(() => {\n  const dispatch = useDispatch();\n\n  const isAuth = useSelector(getIsAuth);\n  const userName = useSelector(getUserName);\n  const userEmail = useSelector(getUserEmail);\n  const avatar = useSelector(getUserAvatar);\n  // const isLoading = useSelector(getIsLoading);\n  const isInitialized = useSelector(getIsInitialized);\n\n  useEffect(\n    () =>\n      function cleanup() {\n        dispatch(setErrorAC(null));\n      },\n    [],\n  );\n\n  if (!isInitialized) {\n    return <Spinner />;\n    // return <h1>HUI</h1>;\n  }\n\n  if (!isAuth) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  // if (isLoading) {\n  //   return <Spinner />;\n  //   // return <h1>HUI</h1>;\n  // }\n\n  // // eslint-disable-next-line no-debugger\n  // debugger;\n\n  return (\n    <div className={style.registrationForm}>\n      <div className={style.container}>\n        <h1>Profile</h1>\n        {avatar && <img src=\"\" alt=\"profile\" />}\n        <div>{userName}</div>\n        <div>{userEmail}</div>\n      </div>\n    </div>\n  );\n});\n","import React, { memo } from 'react';\n\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport s from './RoutesComponent.module.scss';\n\nimport {\n  CreateNewPassword,\n  Login,\n  PasswordRecovery,\n  Profile,\n  Registration,\n} from 'components';\nimport { PATH } from 'enum';\nimport { ReturnComponentType } from 'types';\n\nexport const RoutesComponent = memo((): ReturnComponentType => {\n  console.log('fff');\n\n  return (\n    <div className={s.container}>\n      <Routes>\n        <Route element={<Navigate to={PATH.PROFILE} />} path=\"/\" />\n        <Route element={<Navigate to={PATH.PROFILE} />} path=\"/questionCards\" />\n        <Route element={<Profile />} path={PATH.PROFILE} />\n        <Route element={<Registration />} path={PATH.REGISTRATION} />\n        <Route element={<Login />} path={PATH.LOGIN} />\n        <Route element={<PasswordRecovery />} path={PATH.PASSWORD_RECOVERY} />\n        <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />}>\n          <Route path=\":token\" element={<CreateNewPassword />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n});\n","import React, { ChangeEvent, FormEvent, memo, useCallback, useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Navigate, useNavigate } from 'react-router-dom';\n\nimport {\n  setEmailAC,\n  setPasswordAC,\n  setRememberMeAC,\n} from '../../store/reducers/userAuthFormReducer';\nimport { setUserProfileDataTC } from '../../store/reducers/userReducer';\n\nimport style from './Login.module.scss';\n\nimport { CustomButton, CustomTextInput } from 'components';\nimport { AutoCapitalize, PATH } from 'enum';\nimport { getEmail, getIsAuth, getPassword } from 'store';\n\nexport const Login = memo(() => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const email = useSelector(getEmail);\n  const password = useSelector(getPassword);\n  const isAuth = useSelector(getIsAuth);\n  // const isLoading = useSelector(getIsLoading);\n\n  useEffect(\n    () =>\n      function cleanup() {\n        dispatch(setEmailAC(null));\n        dispatch(setPasswordAC(null));\n      },\n    [],\n  );\n\n  const handleEmailChange = useCallback((value: string) => {\n    dispatch(setEmailAC(value));\n  }, []);\n  const handlePasswordChange = useCallback((value: string) => {\n    dispatch(setPasswordAC(value));\n  }, []);\n  const onCheckBoxChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setRememberMeAC(e.currentTarget.checked));\n  };\n\n  const onSubmitClick = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n\n    dispatch(setUserProfileDataTC());\n    dispatch(setEmailAC(null));\n    dispatch(setPasswordAC(null));\n    console.log('Редирект на профаил');\n    navigate(PATH.PROFILE);\n  };\n\n  console.log('login');\n\n  if (isAuth) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div className={style.loginForm}>\n      <div className={style.container}>\n        <h1>Login</h1>\n        <form onSubmit={onSubmitClick} className={style.form}>\n          <CustomTextInput\n            placeholder=\"Email\"\n            value={email ?? ''}\n            onChange={handleEmailChange}\n            type=\"text\"\n            autoCapitalize={AutoCapitalize.false}\n          />\n          <CustomTextInput\n            placeholder=\"Password\"\n            onChange={handlePasswordChange}\n            value={password ?? ''}\n            type=\"password\"\n          />\n          <div className={style.additions}>\n            <div>\n              <input type=\"checkbox\" onChange={onCheckBoxChange} />\n              <span>Remember Me</span>\n            </div>\n            <Link to={PATH.PASSWORD_RECOVERY}>Forgot your password?</Link>\n          </div>\n          <div>\n            <CustomButton title=\"Login\" type=\"submit\" />\n          </div>\n          <div className={style.signUpContainer}>\n            <div>Don&apos;t have an account?</div>\n            <Link to={PATH.REGISTRATION} className={style.signUpLink}>\n              Sign up\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n});\n","import React, { FormEvent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { setEmailAC } from '../../store/reducers/userAuthFormReducer';\nimport { forgotPasswordTC } from '../../store/reducers/userReducer';\n\nimport style from './PasswordRecovery.module.scss';\n\nimport { CustomButton, CustomTextInput } from 'components';\nimport { AutoCapitalize, PATH } from 'enum';\nimport { getEmail } from 'store';\n\nexport const PasswordRecovery = memo(() => {\n  const dispatch = useDispatch();\n\n  const email = useSelector(getEmail);\n\n  const [isFormSent, setIsFormSent] = useState<boolean>(false);\n\n  useEffect(\n    () =>\n      function cleanup() {\n        console.log('cleanup');\n        dispatch(setEmailAC(null));\n      },\n    [],\n  );\n\n  const handleEmailChange = useCallback((value: string) => {\n    dispatch(setEmailAC(value));\n  }, []);\n\n  const onSubmitClick = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    dispatch(forgotPasswordTC());\n    dispatch(setEmailAC(null));\n    setIsFormSent(true);\n  };\n\n  if (isFormSent) {\n    // return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.passwordRecoveryForm}>\n      <div className={style.container}>\n        <h1>Restoring access</h1>\n        <form onSubmit={onSubmitClick} className={style.form}>\n          <CustomTextInput\n            placeholder=\"Email\"\n            value={email ?? ''}\n            onChange={handleEmailChange}\n            type=\"text\"\n            autoCapitalize={AutoCapitalize.false}\n          />\n          <div className={style.additions}>Enter your backup email</div>\n          <div>\n            <CustomButton title=\"Send\" type=\"submit\" />\n          </div>\n          <div className={style.signUpContainer}>\n            <div>Remembered yor password?</div>\n            <Link to={PATH.LOGIN} className={style.signUpLink}>\n              Back to login\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n});\n","import React, { FormEvent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Navigate, useParams } from 'react-router-dom';\n\nimport {\n  setConfirmPasswordAC,\n  setPasswordAC,\n} from '../../store/reducers/userAuthFormReducer';\nimport { createNewPasswordTC } from '../../store/reducers/userReducer';\n\nimport style from './CreateNewPassword.module.scss';\n\nimport { CustomButton, CustomTextInput } from 'components';\nimport { AutoCapitalize, PATH } from 'enum';\nimport { getConfirmPassword, getPassword } from 'store';\n\nexport const CreateNewPassword = memo(() => {\n  const dispatch = useDispatch();\n  const params = useParams<'token'>();\n  const { token } = params as { token: string };\n\n  const password = useSelector(getPassword);\n  const confirmPassword = useSelector(getConfirmPassword);\n\n  const [isFormSent, setIsFormSent] = useState<boolean>(false);\n\n  useEffect(\n    () =>\n      function cleanup() {\n        console.log('cleanup');\n        dispatch(setPasswordAC(null));\n        dispatch(setConfirmPasswordAC(null));\n      },\n    [],\n  );\n\n  const handlePasswordChange = useCallback((value: string) => {\n    dispatch(setPasswordAC(value));\n  }, []);\n  const handleConfirmPasswordChange = useCallback((value: string) => {\n    dispatch(setConfirmPasswordAC(value));\n  }, []);\n\n  const onSubmitClick = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    dispatch(createNewPasswordTC(token));\n    setIsFormSent(true);\n  };\n\n  if (isFormSent) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.createNewPasswordForm}>\n      <div className={style.container}>\n        <h1>New password</h1>\n        <form onSubmit={onSubmitClick} className={style.form}>\n          <CustomTextInput\n            placeholder=\"Password\"\n            value={password ?? ''}\n            onChange={handlePasswordChange}\n            type=\"text\"\n            autoCapitalize={AutoCapitalize.false}\n          />\n          <CustomTextInput\n            placeholder=\"Confirm password\"\n            value={confirmPassword ?? ''}\n            onChange={handleConfirmPasswordChange}\n            type=\"text\"\n            autoCapitalize={AutoCapitalize.false}\n          />\n          <div className={style.additions}>\n            Should contain at least 8 letters or numbers\n          </div>\n          <div className={style.additions}>One capital and one small letter</div>\n          <div>\n            <CustomButton title=\"Confirm\" type=\"submit\" />\n          </div>\n          <div className={style.signUpContainer}>\n            <div>Remembered yor password?</div>\n            <Link to={PATH.LOGIN} className={style.signUpLink}>\n              Back to login\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nimport s from './CustomButton.module.scss';\n\ntype ButtonPropsType = {\n  title: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset' | undefined;\n};\n\nexport const CustomButton = React.memo((props: ButtonPropsType) => {\n  const { onClick, title, disabled, type } = props;\n  const onButtonClick = (): void => {\n    if (onClick) {\n      onClick();\n    }\n  };\n  return (\n    <button className={s.button} onClick={onButtonClick} disabled={disabled} type={type}>\n      {title}\n    </button>\n  );\n});\n","import { ChangeEvent, memo } from 'react';\n\nimport s from './CustomTextInput.module.scss';\n\nimport { AutoCapitalize } from 'enum';\nimport { ReturnComponentType } from 'types';\n\ntype InputProps = {\n  placeholder: string;\n  type: string;\n  className?: string;\n  onChange: (value: string) => void;\n  value: string;\n  name?: string;\n  autoCapitalize?: AutoCapitalize.true | AutoCapitalize.false;\n};\n\nexport const CustomTextInput = memo((props: InputProps): ReturnComponentType => {\n  const { placeholder, type, className, value, onChange, name, autoCapitalize } = props;\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    onChange(e.currentTarget.value);\n  };\n  return (\n    <div className={s.inputWrap}>\n      <input\n        size={40}\n        type={type}\n        name={name}\n        value={value}\n        onChange={onInputChange}\n        placeholder={placeholder}\n        className={className ?? s.input}\n        autoComplete=\"off\"\n        spellCheck={false}\n        aria-autocomplete=\"list\"\n        autoCapitalize={autoCapitalize ?? AutoCapitalize.true}\n      />\n    </div>\n  );\n});\n","import React, { memo } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport s from './SnackBar.module.scss';\n\nimport { getError } from 'store';\n\nexport const Snackbar = memo(() => {\n  const error = useSelector(getError);\n  return (\n    <div className={s.snackbar}>\n      <div>{error}</div>\n    </div>\n  );\n});\n","import React, { ReactElement } from 'react';\n\nexport const Spinner = (): ReactElement => (\n  <div\n    style={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n  >\n    Loading...\n  </div>\n);\n","import React, { ReactElement, useEffect } from 'react';\n\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { initializeTC } from './store/reducers/appReducer';\n\nimport { Snackbar, Header, RoutesComponent, Spinner } from 'components';\nimport { getError, getIsInitialized, getIsLoading } from 'store';\n\nexport const App = (): ReactElement => {\n  const dispatch = useDispatch();\n  const error = useSelector(getError);\n  // const isAuth = useSelector(getIsAuth);\n  const isInitialized = useSelector(getIsInitialized);\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    if (!isInitialized) {\n      dispatch(initializeTC());\n    }\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div>\n        <Header />\n        <Spinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <RoutesComponent />\n      {error && <Snackbar />}\n    </div>\n  );\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { appReducer, userAuthFormReducer, userReducer } from 'store/reducers';\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  userAuthForm: userAuthFormReducer,\n  user: userReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}